#! /bin/sh
#|
exec racket -tm "$0" -- ${1+"$@"}
|#
#lang racket

;+---------------------------------------------------------------------------------------------------+
(provide main)

;+---------------------------------------------------------------------------------------------------+
(define LIM "-limit")
(define COUNT 20)
(define MSG "hello world")

;+---------------------------------------------------------------------------------------------------+
;; Prints the args joined by a space 20 times or infinitely depending on whether the -limit
;; flag is supplied
;; LoS -> Void
(define (xyes args)
  (define limit (and (cons? args) (string=? (first args) LIM)))
  (output-args (format-args args limit) limit))

;; Formats the list of command line args as a single string
;; LoS Bool -> Str
(define (format-args args lim)
  (define loStr (if lim (rest args) args))
  (if (empty? loStr) MSG (string-join loStr " ")))

;; Prints the arg str 20 times or infinitely
;; Str Bool -> Void
(define (output-args argstr limit)
  (if limit
      (for ([i COUNT]) (displayln argstr))
      (print-infinitely argstr)))

;; Prints the given string infinitely
;; Str -> Void
(define (print-infinitely argstr)
  (displayln argstr)
  (print-infinitely argstr))


(define (main . a)
  ;; this could just use xyes logic, but we wanted to separate them for testing
  (xyes a))